# KUBERNETES_TOKEN=
#   kubectl get secret $(kubectl get secret --namespace web-app-template | grep cicd-token | awk '{print $1}') --namespace web-app-template -o jsonpath='{.data.token}' | base64 --decode && echo ""
# KUBERNETES_SERVER=
#   kubectl config view -o jsonpath='{.clusters[?(@.name == "do-lon1-open-source")].cluster.server}' --raw && echo ""
# KUBERNETES_CLUSTER_CERTIFICATE=
#   kubectl config view -o jsonpath='{.clusters[?(@.name == "do-lon1-open-source")].cluster.certificate-authority-data}' --raw && echo ""

apiVersion: v1
kind: Namespace
metadata:
  name: web-app-template
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cicd
  namespace: web-app-template
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cicd
  namespace: web-app-template
rules:
  - apiGroups: ['', 'apps', 'batch', 'extensions']
    resources:
      ['deployments', 'services', 'replicasets', 'pods', 'jobs', 'cronjobs']
    verbs: ['*']
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cicd
  namespace: web-app-template
subjects:
  - kind: ServiceAccount
    name: cicd
    namespace: web-app-template
roleRef:
  kind: Role
  name: cicd
  apiGroup: rbac.authorization.k8s.io
